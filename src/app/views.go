package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"reflect"
	"strings"
	"unsafe"
)

func bindata_read(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len

	gz, err := gzip.NewReader(bytes.NewBuffer(b))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _src_views_article_edit_html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6f\xa3\x30\x10\xc5\xcf\xe6\x53\x8c\x66\xf7\xba\x61\x73\xc7\x48\x7b\xc8\x79\x2b\x25\x5f\x60\x1a\x26\x60\xc9\x40\x6a\x8f\x93\x46\x88\xef\x5e\xd9\x84\x34\xff\xaa\xf6\x06\x3f\x1e\xef\xcd\xd3\xcc\x30\x80\xe9\x1a\x76\x46\x3c\xa0\xa5\x53\x1f\x04\x61\x1c\xb3\x61\x80\xa3\x91\x06\x16\xff\x9c\x98\xad\xe5\xc8\x94\x52\x45\xb3\x2c\x57\x95\x11\xa0\x09\x17\x79\xb3\x2c\x33\x15\x5d\x76\xf0\x7b\xb1\x72\xae\x77\x7e\xd6\x06\x0b\x5b\x4b\xde\x6b\xe4\xc4\xb1\xcc\x54\x94\x3a\xea\x6a\xbe\x57\xab\xc2\x9a\x72\x18\x60\x01\xe3\x58\xe4\xd6\x9c\xb5\xdc\x55\xb3\x5d\x1e\xec\x14\x75\xc5\x76\xbd\x6b\xa1\x65\x69\xfa\x4a\xe3\xcb\xff\xf5\x26\x65\x28\x55\x98\x6e\x1f\x04\xe4\xb4\x67\x8d\xc2\xef\x82\x60\x2a\x8d\x62\xc4\x32\x42\x47\x2d\x5f\x5e\xf6\x96\xb6\xdc\xf4\xb6\x62\xa7\x71\x33\xb1\x03\xd9\xc0\x1a\xe3\x38\x89\xc0\x38\x22\x38\x7e\x0b\xc6\x71\xf5\x65\xc2\xb9\xac\xb7\xa1\x46\xa8\x48\xe8\x8f\x90\xab\x59\x34\xfe\xba\x09\x9e\x04\x37\xb9\xeb\x84\xae\x62\x23\xf8\x59\xea\xb9\x0c\xd5\xd6\x74\x0f\x75\x66\x7a\x5d\x68\x62\xcf\xcc\xa3\x21\x39\xa6\xd9\x33\xf9\xbb\xfe\xe8\x35\x2e\xff\xde\x5b\xc7\x8f\x69\x61\xf1\x29\x2d\x6d\xfe\xfd\xfb\x51\xfd\xe3\x9c\xfe\x7e\xc8\x78\x18\xcf\xb6\xe9\xc3\x6b\x6b\xe4\xa2\x5e\xd3\x81\x27\x59\x91\xc7\x6b\x28\xb3\xcf\x0b\xf9\x08\x00\x00\xff\xff\xa5\x6d\xdb\x06\xdd\x02\x00\x00"

func src_views_article_edit_html() ([]byte, error) {
	return bindata_read(
		_src_views_article_edit_html,
		"src/views/article_edit.html",
	)
}

var _src_views_article_form_html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcd\x6e\xa3\x30\x10\x3e\x9b\xa7\x18\xcd\xe6\xba\xb0\xb9\x63\x2e\xab\xd5\xaa\x97\xb6\x52\xf2\x02\x6e\x98\x80\x25\x03\xe9\x78\xdc\x34\x42\xbc\x7b\x05\xc4\x51\xf3\xd7\xf6\xe8\xcf\xdf\xaf\xec\xbe\x07\xdb\xd6\xc4\x56\x3c\xa0\x33\x87\x2e\x08\xc2\x30\x24\x4a\xa9\xbc\x5e\x16\x8f\xb4\x07\xc3\x62\x37\x8e\xf2\xac\x5e\x16\x89\x1a\x05\x5b\x58\xa4\xff\x98\x3b\xf6\x91\x1a\x1c\x6c\x9c\xf1\x5e\x23\x4d\x38\x16\x89\x1a\xa9\x6c\xda\x8a\x2e\xd9\x2a\x77\xb6\xe8\x7b\x48\x61\x18\xf2\xcc\xd9\x23\x97\xda\x32\xda\x65\xc1\xcd\x51\x9f\xb0\x6d\xc7\x0d\x34\x24\x75\x57\x6a\x7c\x7e\x5a\xad\xa7\x0c\xa5\x72\xdb\xee\x82\x80\x1c\x76\xa4\x51\xe8\x5d\x10\x6c\xa9\x51\xac\x38\x42\x68\x4d\x43\xa7\xc3\xce\x99\x0d\xd5\x9d\x2b\x89\x35\xae\x67\xec\xcd\xb8\x40\x1a\xfb\x1e\x16\xe9\xc3\xe8\xe4\xd3\xff\x24\x10\x25\xc3\x80\xc0\xf4\x1a\x2c\x53\x79\x37\xef\x38\xdd\xbb\x50\x21\x94\x46\xcc\x6f\x31\x5c\x91\x68\xfc\x75\x56\x63\x26\x9c\xb5\x58\x4d\xd0\xbd\x12\xb3\xe0\x47\x1d\x8e\x43\x4d\xe5\x6c\x7b\x35\x35\xa2\x77\xc7\x46\xc2\x8d\xa8\xd1\xde\x30\x99\x98\x30\xa5\x71\xb7\xf7\x1a\x97\x7f\x2e\x83\xc6\xcb\xe2\xda\x7e\xd2\x8c\x8f\x1d\xcd\xbe\x9f\xe1\xaf\x37\xf8\x2f\x07\xf8\xa9\xfd\x0d\x63\x1f\x5e\x1a\x2b\x27\xed\x5f\x26\x23\x34\x13\xf3\x6c\xfc\x55\x45\xf2\x11\x00\x00\xff\xff\xf0\x74\xd4\xd7\x06\x03\x00\x00"

func src_views_article_form_html() ([]byte, error) {
	return bindata_read(
		_src_views_article_form_html,
		"src/views/article_form.html",
	)
}

var _src_views_article_list_html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcd\x8a\xdb\x30\x10\xc7\xcf\xf2\x53\x0c\x22\x57\x5b\x4e\x0e\x3d\x29\x82\x5c\x0a\x85\x52\x0a\xed\x0b\xa8\xf6\xc4\x16\x4c\x25\x23\xc9\x1b\x42\xd6\xef\xbe\xc8\x8e\x9d\xcd\xae\xc9\xe6\xa6\xf9\xfc\xfd\x67\x34\x97\x0b\x18\xdb\xa2\x37\x31\x00\x27\x7d\x76\x7d\xe4\x30\x0c\x19\x63\x4c\xb6\x5b\x75\xf0\xd1\x54\x84\x01\x8c\x05\x6d\x23\xe6\x55\xeb\x9d\x75\xe4\x1a\x53\x69\x02\xe7\x6b\xf4\x52\xb4\x5b\x95\xb1\xd4\xe9\x08\xc5\x4f\xd7\x34\x58\xcf\x2d\x3a\x25\x35\xb4\x1e\x8f\x7b\x2e\x4e\xde\x44\xe4\xea\x17\x9e\xa4\xd0\x4a\x8a\x6e\x2a\x42\xbb\x64\xf7\x04\x15\xe9\x10\xf6\x5c\x5f\xb9\x7c\xca\xf1\xda\x36\x08\xc5\xa2\x66\xcc\x9f\x80\xce\xc3\x66\x86\x16\x3f\xc2\xef\xfe\x1f\x99\xd0\x2e\x0a\x98\x24\xa3\xc6\x47\xca\x2f\x96\xf0\x21\xc2\x2b\x7c\x77\xfe\xbf\x8e\xc0\x77\x65\xf9\xad\x28\xb7\x45\xb9\x4b\xb3\x83\x80\x9b\xe8\x59\x88\x48\xd5\x7f\xa8\x6f\x60\x18\x38\x44\x13\x09\xf7\x3c\xf9\xfe\xea\x86\x8c\xc5\xe4\x56\xa3\x9d\x42\x30\x0c\x69\xc6\x8c\xcd\x2a\x37\xf7\x7b\x61\x4c\x5a\xfd\x32\xe9\xba\xee\x6d\x45\x3a\x63\x8f\x75\x88\xde\x76\x53\xcd\xa2\xe8\xe6\x51\x32\x74\xda\xce\xfb\x34\x95\xb3\x39\x9e\x31\x0f\xa4\xc7\xa0\x48\x51\x35\x8b\x1c\xff\x81\x02\x3e\x4d\xfe\xc8\x7d\x4c\x5d\xe7\xd9\xe7\x07\xc5\xda\xc4\x85\x35\x1a\x2b\xa0\x0e\x6d\x65\xe8\x33\xeb\xcb\xee\x35\x12\x46\x5c\xfa\x5f\xcd\x15\x42\xf4\x3a\xb4\xb9\x5b\x41\x48\x31\xff\xe7\xfd\x64\x52\x4c\xe7\xf7\xce\x7b\x7f\xf2\xa2\x27\x95\xbd\x05\x00\x00\xff\xff\x83\xc6\x4a\x8a\x85\x03\x00\x00"

func src_views_article_list_html() ([]byte, error) {
	return bindata_read(
		_src_views_article_list_html,
		"src/views/article_list.html",
	)
}

var _src_views_article_view_html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcd\x6a\xc3\x30\x10\x84\xcf\xee\x53\x2c\xa2\xd7\x58\x4e\x0e\x3d\x39\x82\x5c\x4a\x0b\x09\x14\x9a\x17\xd8\xda\x9b\x48\xa0\xca\x46\x92\x5b\x82\xea\x77\x2f\x92\xf2\x03\xa9\x49\x73\xf3\x6a\x77\xe6\x9b\xc1\x21\x80\x32\x92\xac\xf2\x0e\x98\xc6\x43\x37\x78\x06\xe3\xf8\x10\x02\x7c\x2b\x2f\xa1\x5c\x59\xaf\x1a\x4d\xf1\xad\x28\x8a\x5a\xce\x45\x8d\x20\x2d\xed\x96\x8c\x63\xde\x39\x1e\x02\x94\xef\x7a\xd8\xc3\x38\x32\x11\x87\xad\xf2\x49\x53\x73\x14\x35\x97\x73\x91\xc4\x3d\x34\x1a\x9d\x5b\x32\x4d\xd8\xe6\xc3\xb7\xe1\x43\x2b\x27\xa9\x5d\x79\xf8\x81\xe7\xce\x7e\xa2\x07\xb6\xa8\xaa\xa7\xb2\x9a\x97\xd5\x82\x25\x93\x3e\xe9\xe3\xfd\x06\xad\x93\xa8\x5f\xb6\x9b\x75\x8a\x14\xf3\xef\xe0\xb1\x5c\x77\xfb\x3d\xb5\xa7\x94\x06\xbf\xa2\x22\x2f\xcb\x57\x77\xa6\x1c\x0f\x8a\xdb\x1d\xf8\x60\xfa\xac\x60\xe0\x63\x93\x25\xbb\xbc\x88\xda\xf5\x68\x4e\x4d\x54\xd3\x99\x19\x1d\x68\xe6\x34\xa6\x25\x8f\x5b\x11\x7b\xe7\x00\xa4\x1d\xdd\x49\xbd\x66\xde\x26\x4e\xb1\xcc\xbd\x05\xa9\x55\xfe\xcc\x49\xc3\x04\xa4\x27\xd3\x28\x7d\xcd\xf9\xd7\xbb\x25\x4d\x9e\xce\xee\xc7\x71\xc2\xdf\x5b\x74\x72\xd6\xfd\x01\xd4\x3c\xff\xbf\x4b\xa3\xcb\xd7\x6f\x00\x00\x00\xff\xff\xce\x1f\x49\x33\xb0\x02\x00\x00"

func src_views_article_view_html() ([]byte, error) {
	return bindata_read(
		_src_views_article_view_html,
		"src/views/article_view.html",
	)
}

var _src_views_index_html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x31\x6b\xf3\x30\x10\x80\xe1\x39\xf9\x15\xc7\xcd\x49\x14\x0f\xdf\x90\x0f\x59\xd0\xd2\xb5\x50\x4a\xa1\xf3\x45\xb9\x5a\x2a\xb2\x4e\x48\xe7\x80\x31\xfe\xef\xc5\x1d\x4a\xa1\xeb\xc3\x0b\xef\xb2\x40\xcc\x81\x6b\xd4\x06\x98\x68\x96\x49\x11\xd6\x75\xbf\xdb\xed\x6c\xe8\xdc\x3b\x27\x2f\x23\x5b\x13\x3a\xf7\x6d\x05\xee\xe2\xe9\xda\x63\x50\x2d\xff\x8d\x69\x3e\xf0\x48\x27\xa9\x83\x41\xd0\xb9\xb0\x7c\xf4\xf8\xc2\xb5\x49\x46\xf7\x3c\x43\xa6\x91\x21\x36\xb0\xad\x50\x86\x52\xa5\x70\xd5\xb9\xc7\xcd\xd1\xbd\xca\x48\x31\xc3\x23\x4d\xc3\xc4\xd6\x6c\x8d\x3b\x80\x1d\x59\xe9\x57\x7b\x8d\x55\xc3\x13\x29\x23\x78\xc9\xca\x59\x7b\xec\x2e\x97\xf3\xb1\xeb\x8e\xe7\x7f\xe8\x96\x05\x4e\x0f\x03\xc3\xba\xc2\xcc\x54\x1b\x48\xba\x1d\xfe\x1c\x3f\xe5\xfa\x16\x35\x31\xba\x1b\xdf\x39\x6d\xfc\x73\x2c\xd4\x5a\x94\x4c\xca\x07\x48\xe4\x25\x47\x7f\xb2\xa6\xb8\xfd\x57\x00\x00\x00\xff\xff\xed\x8f\xcc\x09\x1f\x01\x00\x00"

func src_views_index_html() ([]byte, error) {
	return bindata_read(
		_src_views_index_html,
		"src/views/index.html",
	)
}

var _src_views_layout_html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdd\x6f\xdb\xb6\x17\x7d\x76\xfe\x0a\xfe\xf4\x62\xfb\x07\x59\x5c\xd6\xb5\x1b\x62\x4a\x5d\x9a\x66\x1f\x40\xd7\x0e\x59\x0a\x6c\x08\xf2\x70\x4d\x5d\x53\x4c\x28\x52\x21\xaf\xac\x19\x8e\xff\xf7\x81\x92\x3f\x52\x24\x18\xfa\xb0\x17\x8b\xbc\x1f\xc7\xe7\x9e\x23\x8a\xe2\x7f\xef\x3f\x5d\x5c\xff\xf5\xfb\x25\xab\xa8\x36\xc5\x89\x88\x0f\x66\xc0\xaa\x3c\x41\x9b\x14\x27\x23\x51\x21\x94\xc5\xc9\x68\x24\x6a\x24\x60\xb2\x02\x1f\x90\xf2\xa4\xa5\xe5\xec\x87\xa4\x4f\x2c\x20\x20\xab\x3c\x2e\xf3\x84\xf3\xcd\x86\x65\x57\xf8\xd0\x62\xa0\xec\x17\x17\x88\x6d\xb7\xc9\xb1\xbd\x22\x6a\x66\xf8\xd0\xea\x55\x9e\xfc\x39\xfb\x7c\x3e\xbb\x70\x75\x03\xa4\x17\x06\x13\x26\x9d\x25\xb4\x94\x27\xbf\x5e\xe6\x58\x2a\x7c\xd2\x67\xa1\xc6\x3c\x59\x69\xec\x1a\xe7\xe9\x49\x69\xa7\x4b\xaa\xf2\x12\x57\x5a\xe2\xac\xdf\xa4\x4c\x5b\x4d\x1a\xcc\x2c\x48\x30\x98\x9f\x0e\x30\xa4\xc9\x60\x71\x69\x3a\x6d\xc1\xb3\x19\x8b\x3c\xaf\x63\x8c\x6d\xb7\x82\x0f\xd9\x58\x67\xb4\xbd\x67\x1e\x4d\x9e\x04\x5a\x1b\x0c\x15\x22\x25\xbb\xe9\x70\xe8\xce\x64\x08\x09\xa3\x75\x83\x79\x42\xf8\x37\xf1\xb8\x8f\x52\xf1\x9d\x56\x62\xe1\xca\x75\x8f\x16\x03\xe8\xe3\x72\x24\xaa\xd3\x42\xc0\x5e\xa7\x64\x4f\x45\x70\x28\x04\xaf\x4e\x87\x1a\x0b\xab\x7e\x31\x12\xad\x19\x16\x91\x11\x93\x06\x42\xc8\x13\x08\xba\xc4\xe4\x09\x0a\x0f\x04\xf2\xde\xad\xd0\x2f\x8d\xeb\x32\xe9\x6a\xde\x06\xf4\x81\xbf\xfa\xee\xfb\x6f\xdf\xbc\x7e\xc3\x77\x8c\x93\xe2\x3c\xdc\x0f\xff\x64\xf4\xd7\xe0\x2a\x4d\x55\xbb\xe8\x01\x0f\x10\x17\xae\xc4\xe7\x18\xc7\xae\x1a\xb4\x21\x77\xe6\x5d\x0d\xda\x66\x0b\x68\x55\x8b\x3f\x1e\x24\x73\x75\x44\xb0\x04\x92\xfe\x0d\xc4\x23\x94\x49\x71\x85\x50\x7e\x3d\xdd\xa5\xf3\xd4\x5a\x4c\x8a\x9f\x86\xc5\x97\x9d\x82\xef\xa4\x14\x7c\xaf\xae\x68\xf6\x50\xd1\x1f\xa3\x63\xef\x6f\xda\xea\x1a\x8c\x0e\xc4\x16\x6b\x56\x62\xd0\xca\x0a\xde\xf4\x2e\xf2\xa3\x8d\x22\xa0\x24\xed\x6c\x8f\xb3\xd9\xb0\xb5\x46\x53\xb2\xed\xb6\x2f\x7b\x92\x13\x4b\xe7\x68\xef\xfc\x9e\x68\x7c\xfb\xc3\x19\xe7\x2b\x30\xba\x04\x72\x3e\xeb\x5e\x65\xce\x2b\x6e\x5b\xfe\xb6\x74\x32\x8f\x05\x67\x2f\x9e\xa1\xa7\xa1\xcf\x57\x1f\xb2\x3f\xc8\x6b\xab\xfa\xc3\x25\x42\x03\x76\x3f\x90\x96\xce\xce\xe2\x21\x7e\x9d\x14\x82\xc7\x4c\x11\xe5\x78\x46\xe3\x8c\xf3\x3b\xad\x02\x74\x7b\x0a\x32\x84\xd9\x81\xd7\x91\xe1\xdb\xd6\xeb\xff\x8a\x96\x0c\xe1\xd5\x97\xac\x36\x1b\xa6\x97\x2c\xfb\xe0\x94\xc2\x9d\x8a\x47\x9a\xdc\x38\xe5\x5a\x7a\x09\xc9\x38\x79\xff\x0c\x09\x4d\xc0\x97\x30\xb4\x7d\x09\xa2\xb5\x2f\x83\xd8\x83\x9b\x47\x07\x45\x90\x5e\x37\x54\x9c\x4c\x96\xad\xed\x2d\x9e\xe8\x34\xa4\x2e\x55\xa9\x4f\x21\xad\xa7\x1b\x7d\x33\xfe\xd9\x39\x65\xf0\xdc\x82\x59\x93\x96\xe1\xd3\xe2\x0e\x25\x8d\x6f\x73\x3f\xd7\x37\xfe\x36\x8f\x3f\x8f\x8f\x87\xfe\xe9\x66\x12\x23\xd9\x43\x3e\x3c\x1e\x1f\x6f\x6e\xa7\x59\xd3\x86\x6a\x02\x5e\xb5\x35\x5a\x0a\xd3\x6d\xda\x27\x4d\x7e\xfa\x7f\x8b\x1d\x7b\x0f\x84\x93\xe9\x1c\xf2\x90\x49\x8f\x40\x78\x69\x30\x16\x4e\xdc\x34\xad\xf3\x90\x29\xa4\x5d\x24\xbc\x5b\x5f\x83\xfa\x08\x35\x4e\xdc\xf4\xe6\x9b\xdb\x39\x64\x10\xd6\x56\xe6\xa7\x73\xc8\x82\x97\xb9\x9a\xd7\x59\x03\x1e\x2d\x7d\x74\x25\x66\xda\x06\xf4\xf4\x0e\x97\xce\xe3\x24\x0e\xb4\x9d\x4e\x3a\x6d\x4b\xd7\xa5\xa5\x93\x3d\x9b\x74\x3c\x88\x30\x4e\xc7\x9c\x77\x5d\x97\xa9\x7e\xde\x19\xec\x07\xee\x3f\x16\xc7\xdd\x5d\x18\xa7\x63\x05\xe3\xe9\xfc\x44\xc1\x64\x3c\x10\x1e\xa7\x6c\x1c\x5f\x99\x0b\x67\x97\x5a\xb5\x1e\xa2\x16\xd9\x41\xb3\x6b\x77\x8f\x96\xb1\xed\x36\xd6\x41\x4b\x6e\xdf\x1d\xd0\x96\x31\xd6\x80\xc2\x78\x09\xc4\x78\x7f\xe0\x76\xbe\x8c\x04\x1f\x3e\xb9\x82\x0f\xf7\xd8\x3f\x01\x00\x00\xff\xff\xef\x66\x86\x4a\xd8\x06\x00\x00"

func src_views_layout_html() ([]byte, error) {
	return bindata_read(
		_src_views_layout_html,
		"src/views/layout.html",
	)
}

var _src_views_login_html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x51\x0a\xc2\x30\x0c\xc6\xf1\xe7\xee\x14\x21\x17\x18\x7b\x6f\x77\x02\xc1\x81\x5e\xa0\xba\x68\x0b\x6d\x53\xda\x54\x19\x63\x77\x17\x27\x3e\x08\x3e\xe6\x47\xf8\xf8\xaf\x2b\xf8\xe4\xa8\x78\xa9\x80\xc1\x2e\xdc\x04\x61\xdb\x3a\xa5\x94\x76\xc3\x78\xe0\xbb\x4f\xba\x77\xc3\xb8\xcb\x8d\x4b\x84\x48\xe2\x78\x36\x38\x1d\x4f\x67\xdc\x5d\x69\x9f\x72\x13\x90\x25\x93\xc1\x6c\x6b\x7d\x72\x99\x11\x92\x8d\x3f\x77\x0e\xf6\x4a\x8e\xc3\x4c\xc5\xe0\xf4\xe5\x3f\x13\xb5\x5d\xa2\x17\x84\x87\x0d\x8d\x0c\xee\x15\x9f\x3f\xdd\xbf\x1b\xc6\xee\x15\x00\x00\xff\xff\x3b\x06\x1c\x24\xb8\x00\x00\x00"

func src_views_login_html() ([]byte, error) {
	return bindata_read(
		_src_views_login_html,
		"src/views/login.html",
	)
}

var _src_views_quote_list_html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x4b\x0a\x02\x31\x0c\x86\xd7\xf5\x14\x61\x5c\x3b\x65\xf6\xa1\x20\xb8\x71\x29\x78\x81\x41\x83\x0d\x94\x16\x3a\x29\x28\x21\x77\x97\xd6\xc7\x2a\xc9\x47\xfe\x87\x2a\x70\x8e\x54\x59\x36\x98\xd2\xfa\x2a\x4d\x26\x30\xdb\x39\xe7\x30\x2e\xe1\xd2\x8a\xd0\x86\x3e\x2e\x61\xa0\x96\xc6\x74\xaa\x50\xd7\xfc\x20\x98\x3f\x1f\x5f\x89\xc3\xc4\x61\xaf\x0a\xf3\xf9\x04\x66\x70\x80\xbe\x1f\x9b\xc4\x52\xfb\x8d\x37\x16\x0a\x9d\x5d\xe9\x29\x60\x86\x7e\x10\xf4\x89\xff\xc6\x94\xef\xbf\x06\xbe\xe7\xbd\x03\x00\x00\xff\xff\x50\xc7\x36\x01\xa3\x00\x00\x00"

func src_views_quote_list_html() ([]byte, error) {
	return bindata_read(
		_src_views_quote_list_html,
		"src/views/quote_list.html",
	)
}

var _src_views_quote_view_html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\xc1\xea\xc2\x30\x0c\x87\xcf\xdd\x53\x84\xfe\xef\x2b\xbb\xf7\x5f\x10\xbc\x78\x14\x7c\x81\xa9\x19\x19\x8e\x05\xbb\x14\x95\xd0\x77\x97\x14\x11\x6f\xf9\x7d\x7c\xf9\x54\x61\x5e\x09\xf3\x2c\x1b\xf8\x65\x7c\x71\x11\x0f\xb5\x76\xaa\xf0\x98\x85\xa0\x3f\x16\x16\x34\x12\x69\x48\x71\x04\xca\x38\xfd\xfb\x70\x37\xbc\x05\x55\xe8\x0f\x7b\xa8\xd5\xa7\xbf\xef\x1d\xc3\x98\x62\xa0\x21\x75\xce\xb9\x78\x5e\xf8\x72\x6b\x7a\xdb\xce\xb4\x13\x3e\xc5\x9a\xb6\xe3\xc4\x2c\x98\x93\xf1\x5d\x11\xe2\xdc\x12\x1f\xda\x12\xe1\xb7\xa1\x0a\xb8\x5e\xed\xfb\x1d\x00\x00\xff\xff\x40\x29\xb8\x1f\xbc\x00\x00\x00"

func src_views_quote_view_html() ([]byte, error) {
	return bindata_read(
		_src_views_quote_view_html,
		"src/views/quote_view.html",
	)
}

var _src_views_uncss_html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\xbb\x92\xdb\x30\x0c\xac\xed\xaf\xe0\xb9\xd7\x68\xee\x59\xf1\x54\xe4\xd5\x65\x92\x22\x4d\xaa\x0c\x25\x22\x16\x62\x3e\x14\x02\xca\x9d\xfe\x3e\x43\x11\x92\x7c\xf6\x15\x36\xb1\x10\xb1\xc0\x2e\x25\xea\x9b\x4f\xdf\x3e\xfe\xf8\xf9\xfd\xb3\xea\xd9\xbb\x66\xaf\xcb\xb2\xd3\x6d\xb4\x53\xb3\xdf\xed\x34\x41\xc7\x18\x43\x8e\x77\xfa\xa6\xaa\xd4\x07\x43\xd8\x29\x36\x47\x52\x23\x81\x55\xed\xa4\xb8\x07\x45\xc8\xa0\xaa\xaa\xec\xeb\x6f\x1b\x6d\x1a\x5d\xe7\x5f\x7f\x5b\x72\x83\xea\x9c\x21\x7a\x3e\x38\x30\xf6\xd0\xe8\x7a\x90\xfc\x1a\xae\x2d\xbe\x9a\x74\xb2\xf1\x25\x28\x0c\x76\xec\xc0\x2a\xe2\xc9\x01\x6d\xf4\x77\x99\xf7\x4e\xc0\x7d\x06\xf7\x02\x1e\x32\x78\x10\xf0\x98\xc1\xa3\x80\xa7\x0c\x9e\xd6\x9e\x32\x5e\x17\x2d\x34\xba\x96\x45\x46\x6a\x5d\xec\x4e\x7f\xc7\xc8\xd0\xc8\x78\xba\x3e\xcb\xcd\x7b\x46\x37\xaf\x3b\xed\xf0\x92\xc5\xe1\xf6\x68\x0e\xce\x45\x66\x90\xe0\xaa\x71\x02\xa9\x59\xaa\x75\x2d\x1d\x56\x57\xbe\xc4\xe4\x49\x21\x83\x17\xe7\x17\x3b\x7e\xc7\xe4\xa5\x1a\xc3\x30\xb2\xe2\x69\x80\xe7\x03\xc3\x2b\x1f\xde\xc9\x0f\x86\xe8\x25\x26\xfb\xde\x33\x1a\x5b\x8f\x6b\x55\x66\x30\x09\xb2\x55\x6b\x58\x66\x5b\x5b\xee\xdf\x0a\x9a\x21\x0d\x26\x2c\x87\xdd\xbb\x3f\xa4\xf2\x5f\xd5\x45\xef\x21\x70\x01\xb3\x91\x25\x3c\xc1\x94\xa7\x29\x80\xc0\x41\xc7\x31\x55\x6c\x8e\x92\x19\x5b\x92\xa2\x30\xfa\x16\x52\x89\x1d\x32\x24\xe3\x0a\xf8\x67\x12\x9a\xd6\x09\x21\x83\x1f\x9c\x61\xb8\x4c\x2f\x8c\x86\x59\x48\x88\x13\x06\xc9\xda\xd8\xad\x3b\x18\x79\xa9\x92\xd7\xff\x62\x3a\xb4\x57\xc3\x65\xff\x44\x68\x56\x7e\x45\xb4\x92\x07\xe3\x61\x1b\x04\xdb\x71\x31\x22\xc1\x11\x5e\x87\x45\x5e\x38\x49\x8b\xc9\xb7\x51\x74\xb6\xa3\x73\xc0\x4b\x8c\x8e\x7f\x61\x38\x43\x18\xce\xc8\x3d\xb0\x11\x65\xe0\x60\xd3\x60\xac\xc5\x0d\x81\x1f\x7a\x43\x48\xab\x1f\x31\x1c\xf3\xb7\x99\x8f\x50\x8e\xfa\xed\x1b\xaa\xeb\xed\x42\xd0\x75\xb9\x25\x74\x5d\x6e\x8d\xff\x01\x00\x00\xff\xff\x57\x23\x9c\x72\x4d\x04\x00\x00"

func src_views_uncss_html() ([]byte, error) {
	return bindata_read(
		_src_views_uncss_html,
		"src/views/uncss.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"src/views/article_edit.html": src_views_article_edit_html,
	"src/views/article_form.html": src_views_article_form_html,
	"src/views/article_list.html": src_views_article_list_html,
	"src/views/article_view.html": src_views_article_view_html,
	"src/views/index.html": src_views_index_html,
	"src/views/layout.html": src_views_layout_html,
	"src/views/login.html": src_views_login_html,
	"src/views/quote_list.html": src_views_quote_list_html,
	"src/views/quote_view.html": src_views_quote_view_html,
	"src/views/uncss.html": src_views_uncss_html,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"src": &_bintree_t{nil, map[string]*_bintree_t{
		"views": &_bintree_t{nil, map[string]*_bintree_t{
			"article_edit.html": &_bintree_t{src_views_article_edit_html, map[string]*_bintree_t{
			}},
			"article_form.html": &_bintree_t{src_views_article_form_html, map[string]*_bintree_t{
			}},
			"article_list.html": &_bintree_t{src_views_article_list_html, map[string]*_bintree_t{
			}},
			"article_view.html": &_bintree_t{src_views_article_view_html, map[string]*_bintree_t{
			}},
			"index.html": &_bintree_t{src_views_index_html, map[string]*_bintree_t{
			}},
			"layout.html": &_bintree_t{src_views_layout_html, map[string]*_bintree_t{
			}},
			"login.html": &_bintree_t{src_views_login_html, map[string]*_bintree_t{
			}},
			"quote_list.html": &_bintree_t{src_views_quote_list_html, map[string]*_bintree_t{
			}},
			"quote_view.html": &_bintree_t{src_views_quote_view_html, map[string]*_bintree_t{
			}},
			"uncss.html": &_bintree_t{src_views_uncss_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}
