// Code generated by go-bindata.
// sources:
// views/article_edit.html
// views/article_form.html
// views/article_list.html
// views/article_view.html
// views/index.html
// views/layout.html
// views/login.html
// views/quote_list.html
// views/quote_view.html
// views/uncss.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsArticle_editHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4f\x6f\xa3\x30\x10\xc5\xcf\xe6\x53\x8c\x66\xf7\xba\x61\x73\xc7\x48\x7b\xc8\x79\x2b\x25\x5f\x60\x1a\x26\x60\xc9\x40\x6a\x8f\x93\x46\x88\xef\x5e\xd9\x84\x34\xff\xaa\xf6\x06\x3f\x1e\xef\xcd\xd3\xcc\x30\x80\xe9\x1a\x76\x46\x3c\xa0\xa5\x53\x1f\x04\x61\x1c\xb3\x61\x80\xa3\x91\x06\x16\xff\x9c\x98\xad\xe5\xc8\x94\x52\x45\xb3\x2c\x57\x95\x11\xa0\x09\x17\x79\xb3\x2c\x33\x15\x5d\x76\xf0\x7b\xb1\x72\xae\x77\x7e\xd6\x06\x0b\x5b\x4b\xde\x6b\xe4\xc4\xb1\xcc\x54\x94\x3a\xea\x6a\xbe\x57\xab\xc2\x9a\x72\x18\x60\x01\xe3\x58\xe4\xd6\x9c\xb5\xdc\x55\xb3\x5d\x1e\xec\x14\x75\xc5\x76\xbd\x6b\xa1\x65\x69\xfa\x4a\xe3\xcb\xff\xf5\x26\x65\x28\x55\x98\x6e\x1f\x04\xe4\xb4\x67\x8d\xc2\xef\x82\x60\x2a\x8d\x62\xc4\x32\x42\x47\x2d\x5f\x5e\xf6\x96\xb6\xdc\xf4\xb6\x62\xa7\x71\x33\xb1\x03\xd9\xc0\x1a\xe3\x38\x89\xc0\x38\x22\x38\x7e\x0b\xc6\x71\xf5\x65\xc2\xb9\xac\xb7\xa1\x46\xa8\x48\xe8\x8f\x90\xab\x59\x34\xfe\xba\x09\x9e\x04\x37\xb9\xeb\x84\xae\x62\x23\xf8\x59\xea\xb9\x0c\xd5\xd6\x74\x0f\x75\x66\x7a\x5d\x68\x62\xcf\xcc\xa3\x21\x39\xa6\xd9\x33\xf9\xbb\xfe\xe8\x35\x2e\xff\xde\x5b\xc7\x8f\x69\x61\xf1\x29\x2d\x6d\xfe\xfd\xfb\x51\xfd\xe3\x9c\xfe\x7e\xc8\x78\x18\xcf\xb6\xe9\xc3\x6b\x6b\xe4\xa2\x5e\xd3\x81\x27\x59\x91\xc7\x6b\x28\xb3\xcf\x0b\xf9\x08\x00\x00\xff\xff\xa5\x6d\xdb\x06\xdd\x02\x00\x00"

func viewsArticle_editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_editHtml,
		"views/article_edit.html",
	)
}

func viewsArticle_editHtml() (*asset, error) {
	bytes, err := viewsArticle_editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_edit.html", size: 733, mode: os.FileMode(420), modTime: time.Unix(1471640159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsArticle_formHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xcd\x6e\xa3\x30\x10\x3e\x9b\xa7\x18\xcd\xe6\xba\xb0\xb9\x63\x2e\xab\xd5\xaa\x97\xb6\x52\xf2\x02\x6e\x98\x80\x25\x03\xe9\x78\xdc\x34\x42\xbc\x7b\x05\xc4\x51\xf3\xd7\xf6\xe8\xcf\xdf\xaf\xec\xbe\x07\xdb\xd6\xc4\x56\x3c\xa0\x33\x87\x2e\x08\xc2\x30\x24\x4a\xa9\xbc\x5e\x16\x8f\xb4\x07\xc3\x62\x37\x8e\xf2\xac\x5e\x16\x89\x1a\x05\x5b\x58\xa4\xff\x98\x3b\xf6\x91\x1a\x1c\x6c\x9c\xf1\x5e\x23\x4d\x38\x16\x89\x1a\xa9\x6c\xda\x8a\x2e\xd9\x2a\x77\xb6\xe8\x7b\x48\x61\x18\xf2\xcc\xd9\x23\x97\xda\x32\xda\x65\xc1\xcd\x51\x9f\xb0\x6d\xc7\x0d\x34\x24\x75\x57\x6a\x7c\x7e\x5a\xad\xa7\x0c\xa5\x72\xdb\xee\x82\x80\x1c\x76\xa4\x51\xe8\x5d\x10\x6c\xa9\x51\xac\x38\x42\x68\x4d\x43\xa7\xc3\xce\x99\x0d\xd5\x9d\x2b\x89\x35\xae\x67\xec\xcd\xb8\x40\x1a\xfb\x1e\x16\xe9\xc3\xe8\xe4\xd3\xff\x24\x10\x25\xc3\x80\xc0\xf4\x1a\x2c\x53\x79\x37\xef\x38\xdd\xbb\x50\x21\x94\x46\xcc\x6f\x31\x5c\x91\x68\xfc\x75\x56\x63\x26\x9c\xb5\x58\x4d\xd0\xbd\x12\xb3\xe0\x47\x1d\x8e\x43\x4d\xe5\x6c\x7b\x35\x35\xa2\x77\xc7\x46\xc2\x8d\xa8\xd1\xde\x30\x99\x98\x30\xa5\x71\xb7\xf7\x1a\x97\x7f\x2e\x83\xc6\xcb\xe2\xda\x7e\xd2\x8c\x8f\x1d\xcd\xbe\x9f\xe1\xaf\x37\xf8\x2f\x07\xf8\xa9\xfd\x0d\x63\x1f\x5e\x1a\x2b\x27\xed\x5f\x26\x23\x34\x13\xf3\x6c\xfc\x55\x45\xf2\x11\x00\x00\xff\xff\xf0\x74\xd4\xd7\x06\x03\x00\x00"

func viewsArticle_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_formHtml,
		"views/article_form.html",
	)
}

func viewsArticle_formHtml() (*asset, error) {
	bytes, err := viewsArticle_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_form.html", size: 774, mode: os.FileMode(420), modTime: time.Unix(1471640159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsArticle_listHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcd\x6a\xdc\x30\x10\xc7\xcf\xf2\x53\x0c\x22\x57\x5b\xde\x1c\x7a\xd2\x0a\x72\x29\x14\x4a\x29\xb4\x2f\x30\xb5\xc7\xb6\x60\x2a\x19\x49\x6e\x08\xa9\xdf\xbd\xc8\x5e\x3b\xdd\xd6\x64\xf7\xa6\xf9\xfc\xfd\x67\x34\xaf\xaf\x60\xdd\x40\xc1\xa6\x08\x92\xf1\xc5\x4f\x49\xc2\x3c\x17\x42\x08\x3d\x9c\xcc\x53\x48\xb6\x61\x8a\x60\x1d\xa0\x4b\x54\x36\x43\xf0\xce\xb3\xef\x6d\x83\x0c\x3e\xb4\x14\xb4\x1a\x4e\xa6\x10\xb9\x53\x07\xd5\x67\xdf\xf7\xd4\x6e\x2d\x46\xa3\x11\x86\x40\xdd\x59\xaa\xe7\x60\x13\x49\xf3\x85\x9e\xb5\x42\xa3\xd5\xb8\x16\x91\xdb\xb3\x27\x86\x86\x31\xc6\xb3\xc4\x0b\x57\xae\x39\x01\x5d\x4f\x50\xed\x6a\x96\xfc\x15\xe8\x03\x3c\x6c\xd0\xea\x53\xfc\x3a\xfd\x60\x1b\x87\x5d\x81\xd0\x6c\xcd\xf2\xc8\xf9\xd5\x1e\x7e\x4a\xf0\x1b\x3e\xfa\xf0\x13\x13\xc8\xc7\xba\xfe\x50\xd5\xa7\xaa\x7e\xcc\xb3\x83\x82\x37\xd1\x9b\x10\x95\xab\xbf\xf1\xd4\xc3\x3c\x4b\x48\x36\x31\x9d\x65\xf6\x7d\xc7\x9e\xad\xa3\xec\x36\x8b\x9d\x43\x30\xcf\x79\xc6\x42\x6c\x2a\x1f\xae\xf7\x22\x84\x76\xf8\x6b\xd5\x75\xd9\xdb\x81\x74\x21\xde\xd7\xa1\x26\x37\xae\x35\xbb\xa2\x37\x8f\xd1\x71\x44\xb7\xed\xb3\x43\xe8\xb0\xa4\x17\x2a\x23\xe3\x12\x55\x39\x6c\x36\x95\xcb\x47\x70\xa4\xbb\xd1\xff\x82\x6f\x60\x8f\x81\xee\xfe\x51\xa9\xb5\x69\x87\x2d\xc6\x11\x69\x24\xd7\x58\xfe\x1f\x76\xb3\x7d\x4b\x4c\x89\x76\xc0\xc5\x3c\x42\xa4\x80\x71\x28\xfd\x01\x43\xab\xed\x4f\xaf\x67\xd3\x6a\x3d\xc1\xbf\xbc\xd7\x67\xaf\x26\x36\xc5\x9f\x00\x00\x00\xff\xff\xab\xdc\xfe\x59\x89\x03\x00\x00"

func viewsArticle_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_listHtml,
		"views/article_list.html",
	)
}

func viewsArticle_listHtml() (*asset, error) {
	bytes, err := viewsArticle_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_list.html", size: 905, mode: os.FileMode(420), modTime: time.Unix(1471640159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsArticle_viewHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xc1\x6a\xf3\x30\x10\x84\xcf\xfe\x9f\x62\x11\xff\x35\x92\x93\x43\x4f\x8a\x21\x97\xd2\x42\x02\x85\xe6\x05\xb6\xf1\x3a\x12\xa8\xb2\x91\xe4\x96\xa0\xfa\xdd\x8b\xe4\x24\x86\xd4\x90\xdc\xac\x9d\xdd\xf9\x66\x70\x8c\xa0\xad\x22\xa7\x83\x07\x66\xf0\xd4\xf6\x81\xc1\x30\xfc\x8b\x11\xbe\x75\x50\xc0\x37\x2e\xe8\x83\xa1\x34\x2b\x8a\x42\xaa\x65\x15\x23\xf0\xbd\x0e\x79\x26\x85\x5a\x56\x59\xe8\xe0\x60\xd0\xfb\x35\x33\x84\x35\xcb\x4b\x6f\xfd\x87\xd1\x5e\x51\xbd\x09\xf0\x03\xcf\xad\xfb\xc4\x00\x6c\x55\x96\x4f\xbc\x5c\xf2\x72\xc5\xb2\x41\x97\xef\xd3\xfe\x0e\x9d\x57\x68\x5e\xf6\xbb\x6d\xc6\xa5\x6c\x0d\xfc\xe7\xdb\xf6\x78\xa4\xfa\x92\xc0\xe2\x57\xba\x18\x45\xfe\xea\xaf\x94\xf3\x42\x21\x11\x94\xa3\x66\xcd\x04\x8e\xd9\xbd\x48\xee\xef\xa6\x3f\xc2\x30\x88\xde\x76\xe3\x05\x83\x90\x5a\xac\xd9\x34\xa9\xa4\xef\xd0\x5e\x9a\x34\x08\x0d\x2e\xe8\x44\x0b\x6f\x30\xab\x22\xc9\x95\x14\x78\x4e\x40\xc6\xd3\x83\xd8\x5b\xe8\x1d\xe4\x1c\xcc\x3e\x5a\x91\x6a\x1d\xae\xa0\xfc\x98\xa3\x74\x64\x0f\xda\xdc\x82\xee\x9a\xd7\x64\x28\xd0\xd5\xfe\xfc\x9c\x03\x04\x87\x5e\x2d\xda\x3f\x04\x29\xc6\x7f\x38\x75\x9a\xbe\x7e\x03\x00\x00\xff\xff\x1b\x42\x42\xfc\x90\x02\x00\x00"

func viewsArticle_viewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsArticle_viewHtml,
		"views/article_view.html",
	)
}

func viewsArticle_viewHtml() (*asset, error) {
	bytes, err := viewsArticle_viewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/article_view.html", size: 656, mode: os.FileMode(420), modTime: time.Unix(1471640159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xcd\x31\x6b\xf3\x30\x10\x80\xe1\x39\xf9\x15\xc7\xcd\x49\x14\x0f\xdf\x90\x0f\x59\xd0\xd2\xb5\x50\x4a\xa1\xf3\x45\xb9\x5a\x2a\xb2\x4e\x48\xe7\x80\x31\xfe\xef\xc5\x1d\x4a\xa1\xeb\xc3\x0b\xef\xb2\x40\xcc\x81\x6b\xd4\x06\x98\x68\x96\x49\x11\xd6\x75\xbf\xdb\xed\x6c\xe8\xdc\x3b\x27\x2f\x23\x5b\x13\x3a\xf7\x6d\x05\xee\xe2\xe9\xda\x63\x50\x2d\xff\x8d\x69\x3e\xf0\x48\x27\xa9\x83\x41\xd0\xb9\xb0\x7c\xf4\xf8\xc2\xb5\x49\x46\xf7\x3c\x43\xa6\x91\x21\x36\xb0\xad\x50\x86\x52\xa5\x70\xd5\xb9\xc7\xcd\xd1\xbd\xca\x48\x31\xc3\x23\x4d\xc3\xc4\xd6\x6c\x8d\x3b\x80\x1d\x59\xe9\x57\x7b\x8d\x55\xc3\x13\x29\x23\x78\xc9\xca\x59\x7b\xec\x2e\x97\xf3\xb1\xeb\x8e\xe7\x7f\xe8\x96\x05\x4e\x0f\x03\xc3\xba\xc2\xcc\x54\x1b\x48\xba\x1d\xfe\x1c\x3f\xe5\xfa\x16\x35\x31\xba\x1b\xdf\x39\x6d\xfc\x73\x2c\xd4\x5a\x94\x4c\xca\x07\x48\xe4\x25\x47\x7f\xb2\xa6\xb8\xfd\x57\x00\x00\x00\xff\xff\xed\x8f\xcc\x09\x1f\x01\x00\x00"

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 287, mode: os.FileMode(420), modTime: time.Unix(1471640159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsLayoutHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xd1\x6f\xdb\xb6\x13\x7e\x4e\xfe\x0a\xfe\xf4\x22\xfb\x07\x49\x5c\x96\xb5\x1b\x6a\x49\x58\x9a\x64\x5d\x81\xad\x1d\x8a\x0c\xd8\x10\xe4\xe1\x4c\x9d\x28\x26\x14\xa9\x90\x27\x6b\x86\xe3\xff\x7d\xa0\x64\xc7\x29\x6a\x04\x7b\xb1\xc8\xbb\xfb\x3e\xde\x7d\xe4\x9d\xf3\xff\x5d\x7d\xbe\xbc\xf9\xfb\x8f\x6b\xd6\x50\xab\xcb\xd3\x3c\x7c\x98\x06\x23\x8b\x08\x4d\x54\x9e\x9e\xe4\x0d\x42\x55\x9e\x9e\x9c\xe4\x2d\x12\x30\xd1\x80\xf3\x48\x45\xd4\x53\x9d\xfe\x14\x8d\x8e\x25\x78\x64\x8d\xc3\xba\x88\x38\xdf\x6c\x58\xf6\x05\x1f\x7b\xf4\x94\xfd\x6a\x3d\xb1\xed\x36\x3a\xc0\x1b\xa2\x2e\xc5\xc7\x5e\xad\x8a\xe8\xaf\xf4\xcf\x8b\xf4\xd2\xb6\x1d\x90\x5a\x6a\x8c\x98\xb0\x86\xd0\x50\x11\x7d\xbc\x2e\xb0\x92\xf8\x02\x67\xa0\xc5\x22\x5a\x29\x1c\x3a\xeb\xe8\x45\xe8\xa0\x2a\x6a\x8a\x0a\x57\x4a\x60\x3a\x6e\x12\xa6\x8c\x22\x05\x3a\xf5\x02\x34\x16\x67\x13\x0d\x29\xd2\x58\x5e\xeb\x41\x19\x70\x2c\x65\x21\xcf\x9b\x60\x63\xdb\x6d\xce\x27\x6f\x88\xd3\xca\x3c\x30\x87\xba\x88\x3c\xad\x35\xfa\x06\x91\xa2\x5d\x75\xd0\x75\x99\xf0\x3e\x62\xb4\xee\xb0\x88\x08\xff\x21\x1e\xf6\x23\xd0\x0b\xa7\x3a\x62\xe0\xd7\x46\x30\xef\xc4\x14\x7e\xef\xa3\x32\xe7\x93\x2f\xa8\xc9\x77\x72\xe6\x4b\x5b\xad\x47\x5c\x30\xa0\x0b\xcb\x93\xbc\x39\x2b\x73\xd8\x4b\x19\xed\xb3\xcd\x39\x94\x39\x6f\xce\xa6\x18\x03\xab\x71\x71\x92\xf7\x7a\x5a\x84\xa4\x5f\xe0\xb8\x27\x10\x0f\x76\x85\xae\xd6\x76\xc8\x84\x6d\x79\xef\xd1\x79\x7e\xfe\xc3\x8f\xdf\xbf\x7d\xf3\x96\xe3\x44\x1b\x95\x17\xfe\x61\xe2\xd6\xea\x38\x93\x54\xd4\xf4\xcb\x91\xe2\x19\x74\x69\x2b\x7c\x0d\xd5\x82\xd2\x64\xdf\x39\xdb\x82\x32\xd9\x12\x7a\xd9\xe3\xcf\x3b\x74\x60\x0a\x0c\x86\x40\xd0\x6b\x24\x0e\xa1\x8a\xca\x2f\x08\xd5\x6b\x51\xb5\x75\xd4\x1b\x8c\xca\x5f\xa6\xc5\xd7\xb1\x39\xdf\x09\x94\xf3\xbd\x66\x79\xc7\x84\x06\xef\x8b\x28\xa8\xae\x55\xc0\xfe\xae\x8c\x6a\x41\x2b\x4f\x6c\xb9\x66\x15\x7a\x25\x4d\xce\xbb\xf1\x6e\xf8\xe1\x72\x72\x8f\x82\x94\x35\x23\xcf\x66\xc3\xd6\x0a\x75\xc5\xb6\xdb\x31\xec\x85\x2f\xaf\xad\xa5\xfd\x7d\xee\x13\x0d\xcf\xfe\x1d\xe7\x2b\xd0\xaa\x02\xb2\x2e\x1b\xce\x33\xeb\x24\x17\x0d\x8a\x07\xee\xb0\x46\x87\x2e\x2a\x73\xdf\x81\xd9\x67\x58\x03\xab\x21\x0d\xfd\xf8\x66\x7c\x42\x1d\x98\x32\x14\x78\x8c\xf8\x5e\x49\x0f\xc3\x33\xab\xf7\xe9\xf3\x51\xff\xe1\x0c\xe1\xfd\xf9\xd7\x47\x6c\x36\x4c\xd5\x2c\xfb\xcd\x4a\x89\xbb\x22\x0f\x67\x72\x6d\xa5\xed\xe9\x28\x95\xb6\xe2\xe1\x1b\x2a\xd4\x1e\x8f\x91\x28\x73\x94\xa3\x37\x81\x25\x05\x4d\xdf\x32\x99\x67\xc9\x0f\x32\xe7\xfb\xee\x9a\xd5\xbd\x19\xef\x61\xa6\x12\x9f\xd8\x44\x26\x2e\x81\xa4\x9d\x6f\xd4\x6d\xfc\xc1\x5a\xa9\xf1\xc2\x80\x5e\x93\x12\xfe\xf3\xf2\x1e\x05\xc5\x77\x85\x5b\xa8\x5b\x77\x57\x84\x9f\xa7\xa7\x67\xfc\x7c\x33\x0b\x96\xec\xb1\x98\x3e\x4f\x4f\xb7\x77\xf3\xac\xeb\x7d\x33\x03\x27\xfb\x16\x0d\xf9\xf9\x36\x19\x9d\xba\x38\xfb\xbf\xc1\x81\x5d\x01\xe1\x6c\xbe\x80\xc2\x67\xc2\x21\x10\x5e\x6b\x0c\x81\x33\x3b\x4f\xda\xc2\x67\x12\x69\x67\xf1\xef\xd7\x37\x20\x3f\x41\x8b\x33\x3b\xbf\xfd\xee\x6e\x01\xd9\x38\x35\x8a\xb3\x05\x64\x61\x72\xc8\x45\x9b\x75\xe0\xd0\xd0\x27\x5b\x61\xa6\x8c\x47\x47\xef\xb1\xb6\x0e\x67\xa1\xa0\xed\x7c\x36\x28\x53\xd9\x21\xa9\xac\x18\xb3\x49\xe2\x49\x84\x38\x89\x39\x1f\x86\x21\x93\x63\xbd\x29\xec\x0b\x1e\x7b\xf8\xb0\xbb\xf7\x71\x12\x4b\x88\xe7\x8b\x53\x09\xb3\x78\x4a\x38\x4e\x58\x1c\xc6\xe2\xa5\x35\xb5\x92\xbd\x83\xa0\x45\xf6\xe1\xe3\x15\x63\xdb\x6d\x70\x42\x4f\x76\x0f\xf1\x68\xaa\x60\xeb\x40\x62\x98\xcb\xc1\x3e\xb6\xc2\x61\xd4\x4d\x23\x2e\xe7\xd3\x5f\xcb\xbf\x01\x00\x00\xff\xff\x9c\x22\x61\xd4\x6b\x06\x00\x00"

func viewsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLayoutHtml,
		"views/layout.html",
	)
}

func viewsLayoutHtml() (*asset, error) {
	bytes, err := viewsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/layout.html", size: 1643, mode: os.FileMode(420), modTime: time.Unix(1475010065, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsLoginHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\x51\x0a\xc2\x30\x0c\xc6\xf1\xe7\xee\x14\x21\x17\x18\x7b\x6f\x77\x02\xc1\x81\x5e\xa0\xba\x68\x0b\x6d\x53\xda\x54\x19\x63\x77\x17\x27\x3e\x08\x3e\xe6\x47\xf8\xf8\xaf\x2b\xf8\xe4\xa8\x78\xa9\x80\xc1\x2e\xdc\x04\x61\xdb\x3a\xa5\x94\x76\xc3\x78\xe0\xbb\x4f\xba\x77\xc3\xb8\xcb\x8d\x4b\x84\x48\xe2\x78\x36\x38\x1d\x4f\x67\xdc\x5d\x69\x9f\x72\x13\x90\x25\x93\xc1\x6c\x6b\x7d\x72\x99\x11\x92\x8d\x3f\x77\x0e\xf6\x4a\x8e\xc3\x4c\xc5\xe0\xf4\xe5\x3f\x13\xb5\x5d\xa2\x17\x84\x87\x0d\x8d\x0c\xee\x15\x9f\x3f\xdd\xbf\x1b\xc6\xee\x15\x00\x00\xff\xff\x3b\x06\x1c\x24\xb8\x00\x00\x00"

func viewsLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsLoginHtml,
		"views/login.html",
	)
}

func viewsLoginHtml() (*asset, error) {
	bytes, err := viewsLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/login.html", size: 184, mode: os.FileMode(420), modTime: time.Unix(1471640159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsQuote_listHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8e\x4b\x0a\x02\x31\x0c\x86\xd7\xf5\x14\x61\x5c\x3b\x65\xf6\xa1\x20\xb8\x71\x29\x78\x81\x41\x83\x0d\x94\x16\x3a\x29\x28\x21\x77\x97\xd6\xc7\x2a\xc9\x47\xfe\x87\x2a\x70\x8e\x54\x59\x36\x98\xd2\xfa\x2a\x4d\x26\x30\xdb\x39\xe7\x30\x2e\xe1\xd2\x8a\xd0\x86\x3e\x2e\x61\xa0\x96\xc6\x74\xaa\x50\xd7\xfc\x20\x98\x3f\x1f\x5f\x89\xc3\xc4\x61\xaf\x0a\xf3\xf9\x04\x66\x70\x80\xbe\x1f\x9b\xc4\x52\xfb\x8d\x37\x16\x0a\x9d\x5d\xe9\x29\x60\x86\x7e\x10\xf4\x89\xff\xc6\x94\xef\xbf\x06\xbe\xe7\xbd\x03\x00\x00\xff\xff\x50\xc7\x36\x01\xa3\x00\x00\x00"

func viewsQuote_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsQuote_listHtml,
		"views/quote_list.html",
	)
}

func viewsQuote_listHtml() (*asset, error) {
	bytes, err := viewsQuote_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/quote_list.html", size: 163, mode: os.FileMode(420), modTime: time.Unix(1471640159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsQuote_viewHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8c\xc1\xea\xc2\x30\x0c\x87\xcf\xdd\x53\x84\xfe\xef\x2b\xbb\xf7\x5f\x10\xbc\x78\x14\x7c\x81\xa9\x19\x19\x8e\x05\xbb\x14\x95\xd0\x77\x97\x14\x11\x6f\xf9\x7d\x7c\xf9\x54\x61\x5e\x09\xf3\x2c\x1b\xf8\x65\x7c\x71\x11\x0f\xb5\x76\xaa\xf0\x98\x85\xa0\x3f\x16\x16\x34\x12\x69\x48\x71\x04\xca\x38\xfd\xfb\x70\x37\xbc\x05\x55\xe8\x0f\x7b\xa8\xd5\xa7\xbf\xef\x1d\xc3\x98\x62\xa0\x21\x75\xce\xb9\x78\x5e\xf8\x72\x6b\x7a\xdb\xce\xb4\x13\x3e\xc5\x9a\xb6\xe3\xc4\x2c\x98\x93\xf1\x5d\x11\xe2\xdc\x12\x1f\xda\x12\xe1\xb7\xa1\x0a\xb8\x5e\xed\xfb\x1d\x00\x00\xff\xff\x40\x29\xb8\x1f\xbc\x00\x00\x00"

func viewsQuote_viewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsQuote_viewHtml,
		"views/quote_view.html",
	)
}

func viewsQuote_viewHtml() (*asset, error) {
	bytes, err := viewsQuote_viewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/quote_view.html", size: 188, mode: os.FileMode(420), modTime: time.Unix(1471640159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsUncssHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\x3b\x6f\xdd\x3c\x0c\x9d\x9d\x5f\xc1\xdc\xf1\x03\x0c\x23\xbb\xe2\xe1\xeb\x63\x28\x50\x34\x40\xbb\x74\xa4\x25\xc6\x57\xb8\x7a\x95\xa2\x92\xf8\xdf\x17\xb4\x7d\x9d\xa0\x4d\x07\x83\x34\x1f\x87\x47\xd4\x91\xb9\xfd\xf8\xed\xc3\x8f\x9f\x0f\x9f\xe0\x2c\x31\x8c\x37\x66\x33\x9d\x99\xb2\x5b\xc6\x9b\xae\x33\x95\xac\xf8\x9c\xd4\xef\xcc\x6d\xdf\xc3\xff\x58\xbd\x05\xc1\xb9\x42\xab\xe4\x60\x5a\x40\xce\x04\xd5\x0b\x41\xdf\x6f\x75\xe7\xbb\xd1\xe0\x68\x06\xfd\xce\x77\x5b\xac\x80\x0d\x58\xeb\xfd\x29\x10\xba\xd3\x68\x86\xb2\xc7\x0f\xf7\x18\xf1\x15\xf9\xe2\xf2\x73\x02\x9f\x5c\xb3\xe4\xa0\xca\x12\xa8\x1e\xf0\xe5\x40\xb7\xd9\xd1\x68\x86\xdd\xec\x88\x53\xc8\xf6\xf2\xab\x65\xa1\x71\x47\x37\xc3\x9b\xd8\x5a\xd3\xc2\x6a\x3b\x13\xfc\x9f\x28\xc1\xbf\xa6\x56\xe7\x2d\x47\xfd\x61\xfa\x6b\x30\xd3\xde\x73\xed\x36\xc3\x3e\xe1\x38\xd4\xe7\xcc\xb1\x82\x17\x8a\xfb\xe2\xae\xa7\x79\xcc\x1c\xf7\x6e\x9f\x4a\x13\x90\xa5\xd0\xfd\x49\xe8\x45\x4e\xef\xc4\x0b\xd6\xfa\x9c\xd9\xbd\x97\xab\x6d\x8a\xfe\xe8\x52\x04\x64\xd2\x55\x1d\xee\xc6\xed\x18\x79\xb0\x7b\x60\x5f\xe3\x97\xef\xdb\x1d\xbd\x5d\x35\xd3\x71\x6f\x98\xe6\x86\x33\xf5\xff\x5d\x07\xe8\xe9\xff\x99\xed\x4c\x2d\x98\xae\x69\xc9\x17\x4a\x60\x73\x8c\x94\x04\x0a\xe7\x90\x67\x70\xd9\x2a\x6f\xb0\x0e\x05\xa1\xb4\x64\xa5\xa1\xaa\x0d\x12\x46\xaa\x05\x2d\x69\x69\x21\x96\x45\x15\x07\x53\xce\x81\x30\x41\x6a\x71\x22\x06\x9b\x53\x15\x4c\x02\x75\x89\x53\x0e\xe0\x28\x90\xa8\x5c\x28\x90\x95\xcc\x80\x22\xdc\x2b\x16\x54\x61\x9f\x66\xb0\x67\x64\x98\x9a\x0f\xe2\x55\x5d\x95\x58\xeb\x75\x02\x6a\x3d\x25\xf1\xb2\x40\xe3\xb0\x49\x0e\x50\xb8\xad\x46\xb8\x7f\xc2\xd0\x08\x2e\xb4\xe8\xf6\xe1\x51\xd9\x2a\x55\xa6\x99\x5e\xc0\xc7\x92\x79\xe5\xf2\x84\xec\x71\x0a\x04\x53\x0e\x0e\xbc\x60\xf0\x76\x07\x56\xd5\xeb\x52\xae\x5a\x59\xd5\xb3\xdd\xc8\xae\x20\x33\xbc\xbe\x37\x33\x6c\x8f\xd0\x0c\xdb\xa3\xfc\x1d\x00\x00\xff\xff\xf0\x25\xa4\x2d\xac\x03\x00\x00"

func viewsUncssHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsUncssHtml,
		"views/uncss.html",
	)
}

func viewsUncssHtml() (*asset, error) {
	bytes, err := viewsUncssHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/uncss.html", size: 940, mode: os.FileMode(420), modTime: time.Unix(1471640159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/article_edit.html": viewsArticle_editHtml,
	"views/article_form.html": viewsArticle_formHtml,
	"views/article_list.html": viewsArticle_listHtml,
	"views/article_view.html": viewsArticle_viewHtml,
	"views/index.html": viewsIndexHtml,
	"views/layout.html": viewsLayoutHtml,
	"views/login.html": viewsLoginHtml,
	"views/quote_list.html": viewsQuote_listHtml,
	"views/quote_view.html": viewsQuote_viewHtml,
	"views/uncss.html": viewsUncssHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"article_edit.html": &bintree{viewsArticle_editHtml, map[string]*bintree{}},
		"article_form.html": &bintree{viewsArticle_formHtml, map[string]*bintree{}},
		"article_list.html": &bintree{viewsArticle_listHtml, map[string]*bintree{}},
		"article_view.html": &bintree{viewsArticle_viewHtml, map[string]*bintree{}},
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
		"layout.html": &bintree{viewsLayoutHtml, map[string]*bintree{}},
		"login.html": &bintree{viewsLoginHtml, map[string]*bintree{}},
		"quote_list.html": &bintree{viewsQuote_listHtml, map[string]*bintree{}},
		"quote_view.html": &bintree{viewsQuote_viewHtml, map[string]*bintree{}},
		"uncss.html": &bintree{viewsUncssHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

