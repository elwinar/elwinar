// Code generated by go-bindata.
// sources:
// src/views/article_edit.html
// src/views/article_form.html
// src/views/article_list.html
// src/views/article_view.html
// src/views/index.html
// src/views/layout.html
// src/views/login.html
// src/views/quote_list.html
// src/views/quote_view.html
// src/views/uncss.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcViewsArticle_editHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6f\xa3\x30\x10\xc5\xcf\xe6\x53\x8c\x66\xf7\xba\x61\x73\xc7\x48\x7b\xc8\x79\x2b\x25\x5f\x60\x1a\x26\x60\xc9\x40\x6a\x8f\x93\x46\x88\xef\x5e\xd9\x84\x34\xff\xaa\xf6\x06\x3f\x1e\xef\xcd\xd3\xcc\x30\x80\xe9\x1a\x76\x46\x3c\xa0\xa5\x53\x1f\x04\x61\x1c\xb3\x61\x80\xa3\x91\x06\x16\xff\x9c\x98\xad\xe5\xc8\x94\x52\x45\xb3\x2c\x57\x95\x11\xa0\x09\x17\x79\xb3\x2c\x33\x15\x5d\x76\xf0\x7b\xb1\x72\xae\x77\x7e\xd6\x06\x0b\x5b\x4b\xde\x6b\xe4\xc4\xb1\xcc\x54\x94\x3a\xea\x6a\xbe\x57\xab\xc2\x9a\x72\x18\x60\x01\xe3\x58\xe4\xd6\x9c\xb5\xdc\x55\xb3\x5d\x1e\xec\x14\x75\xc5\x76\xbd\x6b\xa1\x65\x69\xfa\x4a\xe3\xcb\xff\xf5\x26\x65\x28\x55\x98\x6e\x1f\x04\xe4\xb4\x67\x8d\xc2\xef\x82\x60\x2a\x8d\x62\xc4\x32\x42\x47\x2d\x5f\x5e\xf6\x96\xb6\xdc\xf4\xb6\x62\xa7\x71\x33\xb1\x03\xd9\xc0\x1a\xe3\x38\x89\xc0\x38\x22\x38\x7e\x0b\xc6\x71\xf5\x65\xc2\xb9\xac\xb7\xa1\x46\xa8\x48\xe8\x8f\x90\xab\x59\x34\xfe\xba\x09\x9e\x04\x37\xb9\xeb\x84\xae\x62\x23\xf8\x59\xea\xb9\x0c\xd5\xd6\x74\x0f\x75\x66\x7a\x5d\x68\x62\xcf\xcc\xa3\x21\x39\xa6\xd9\x33\xf9\xbb\xfe\xe8\x35\x2e\xff\xde\x5b\xc7\x8f\x69\x61\xf1\x29\x2d\x6d\xfe\xfd\xfb\x51\xfd\xe3\x9c\xfe\x7e\xc8\x78\x18\xcf\xb6\xe9\xc3\x6b\x6b\xe4\xa2\x5e\xd3\x81\x27\x59\x91\xc7\x6b\x28\xb3\xcf\x0b\xf9\x08\x00\x00\xff\xff\xa5\x6d\xdb\x06\xdd\x02\x00\x00"

func srcViewsArticle_editHtmlBytes() ([]byte, error) {
	return bindataRead(
		_srcViewsArticle_editHtml,
		"src/views/article_edit.html",
	)
}

func srcViewsArticle_editHtml() (*asset, error) {
	bytes, err := srcViewsArticle_editHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/views/article_edit.html", size: 733, mode: os.FileMode(420), modTime: time.Unix(1520018149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcViewsArticle_formHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcd\x6e\xa3\x30\x10\x3e\x9b\xa7\x18\xcd\xe6\xba\xb0\xb9\x63\x2e\xab\xd5\xaa\x97\xb6\x52\xf2\x02\x6e\x98\x80\x25\x03\xe9\x78\xdc\x34\x42\xbc\x7b\x05\xc4\x51\xf3\xd7\xf6\xe8\xcf\xdf\xaf\xec\xbe\x07\xdb\xd6\xc4\x56\x3c\xa0\x33\x87\x2e\x08\xc2\x30\x24\x4a\xa9\xbc\x5e\x16\x8f\xb4\x07\xc3\x62\x37\x8e\xf2\xac\x5e\x16\x89\x1a\x05\x5b\x58\xa4\xff\x98\x3b\xf6\x91\x1a\x1c\x6c\x9c\xf1\x5e\x23\x4d\x38\x16\x89\x1a\xa9\x6c\xda\x8a\x2e\xd9\x2a\x77\xb6\xe8\x7b\x48\x61\x18\xf2\xcc\xd9\x23\x97\xda\x32\xda\x65\xc1\xcd\x51\x9f\xb0\x6d\xc7\x0d\x34\x24\x75\x57\x6a\x7c\x7e\x5a\xad\xa7\x0c\xa5\x72\xdb\xee\x82\x80\x1c\x76\xa4\x51\xe8\x5d\x10\x6c\xa9\x51\xac\x38\x42\x68\x4d\x43\xa7\xc3\xce\x99\x0d\xd5\x9d\x2b\x89\x35\xae\x67\xec\xcd\xb8\x40\x1a\xfb\x1e\x16\xe9\xc3\xe8\xe4\xd3\xff\x24\x10\x25\xc3\x80\xc0\xf4\x1a\x2c\x53\x79\x37\xef\x38\xdd\xbb\x50\x21\x94\x46\xcc\x6f\x31\x5c\x91\x68\xfc\x75\x56\x63\x26\x9c\xb5\x58\x4d\xd0\xbd\x12\xb3\xe0\x47\x1d\x8e\x43\x4d\xe5\x6c\x7b\x35\x35\xa2\x77\xc7\x46\xc2\x8d\xa8\xd1\xde\x30\x99\x98\x30\xa5\x71\xb7\xf7\x1a\x97\x7f\x2e\x83\xc6\xcb\xe2\xda\x7e\xd2\x8c\x8f\x1d\xcd\xbe\x9f\xe1\xaf\x37\xf8\x2f\x07\xf8\xa9\xfd\x0d\x63\x1f\x5e\x1a\x2b\x27\xed\x5f\x26\x23\x34\x13\xf3\x6c\xfc\x55\x45\xf2\x11\x00\x00\xff\xff\xf0\x74\xd4\xd7\x06\x03\x00\x00"

func srcViewsArticle_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_srcViewsArticle_formHtml,
		"src/views/article_form.html",
	)
}

func srcViewsArticle_formHtml() (*asset, error) {
	bytes, err := srcViewsArticle_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/views/article_form.html", size: 774, mode: os.FileMode(420), modTime: time.Unix(1520018149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcViewsArticle_listHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcd\x8a\xdb\x30\x10\xc7\xcf\xf2\x53\x0c\x22\x57\x5b\x4e\x0e\x3d\x29\x82\x5c\x0a\x85\x52\x0a\xed\x0b\xa8\xf6\xc4\x16\x4c\x25\x23\xc9\x1b\x42\xd6\xef\xbe\xc8\x8e\x9d\xcd\xae\xc9\xe6\xa6\xf9\xfc\xfd\x67\x34\x97\x0b\x18\xdb\xa2\x37\x31\x00\x27\x7d\x76\x7d\xe4\x30\x0c\x19\x63\x4c\xb6\x5b\x75\xf0\xd1\x54\x84\x01\x8c\x05\x6d\x23\xe6\x55\xeb\x9d\x75\xe4\x1a\x53\x69\x02\xe7\x6b\xf4\x52\xb4\x5b\x95\xb1\xd4\xe9\x08\xc5\x4f\xd7\x34\x58\xcf\x2d\x3a\x25\x35\xb4\x1e\x8f\x7b\x2e\x4e\xde\x44\xe4\xea\x17\x9e\xa4\xd0\x4a\x8a\x6e\x2a\x42\xbb\x64\xf7\x04\x15\xe9\x10\xf6\x5c\x5f\xb9\x7c\xca\xf1\xda\x36\x08\xc5\xa2\x66\xcc\x9f\x80\xce\xc3\x66\x86\x16\x3f\xc2\xef\xfe\x1f\x99\xd0\x2e\x0a\x98\x24\xa3\xc6\x47\xca\x2f\x96\xf0\x21\xc2\x2b\x7c\x77\xfe\xbf\x8e\xc0\x77\x65\xf9\xad\x28\xb7\x45\xb9\x4b\xb3\x83\x80\x9b\xe8\x59\x88\x48\xd5\x7f\xa8\x6f\x60\x18\x38\x44\x13\x09\xf7\x3c\xf9\xfe\xea\x86\x8c\xc5\xe4\x56\xa3\x9d\x42\x30\x0c\x69\xc6\x8c\xcd\x2a\x37\xf7\x7b\x61\x4c\x5a\xfd\x32\xe9\xba\xee\x6d\x45\x3a\x63\x8f\x75\x88\xde\x76\x53\xcd\xa2\xe8\xe6\x51\x32\x74\xda\xce\xfb\x34\x95\xb3\x39\x9e\x31\x0f\xa4\xc7\xa0\x48\x51\x35\x8b\x1c\xff\x81\x02\x3e\x4d\xfe\xc8\x7d\x4c\x5d\xe7\xd9\xe7\x07\xc5\xda\xc4\x85\x35\x1a\x2b\xa0\x0e\x6d\x65\xe8\x33\xeb\xcb\xee\x35\x12\x46\x5c\xfa\x5f\xcd\x15\x42\xf4\x3a\xb4\xb9\x5b\x41\x48\x31\xff\xe7\xfd\x64\x52\x4c\xe7\xf7\xce\x7b\x7f\xf2\xa2\x27\x95\xbd\x05\x00\x00\xff\xff\x83\xc6\x4a\x8a\x85\x03\x00\x00"

func srcViewsArticle_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_srcViewsArticle_listHtml,
		"src/views/article_list.html",
	)
}

func srcViewsArticle_listHtml() (*asset, error) {
	bytes, err := srcViewsArticle_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/views/article_list.html", size: 901, mode: os.FileMode(420), modTime: time.Unix(1520018149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcViewsArticle_viewHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcd\x6a\xc3\x30\x10\x84\xcf\xee\x53\x2c\xa2\xd7\x58\x4e\x0e\x3d\x39\x82\x5c\x4a\x0b\x09\x14\x9a\x17\xd8\xda\x9b\x48\xa0\xca\x46\x92\x5b\x82\xea\x77\x2f\x92\xf2\x03\xa9\x49\x73\xf3\x6a\x77\xe6\x9b\xc1\x21\x80\x32\x92\xac\xf2\x0e\x98\xc6\x43\x37\x78\x06\xe3\xf8\x10\x02\x7c\x2b\x2f\xa1\x5c\x59\xaf\x1a\x4d\xf1\xad\x28\x8a\x5a\xce\x45\x8d\x20\x2d\xed\x96\x8c\x63\xde\x39\x1e\x02\x94\xef\x7a\xd8\xc3\x38\x32\x11\x87\xad\xf2\x49\x53\x73\x14\x35\x97\x73\x91\xc4\x3d\x34\x1a\x9d\x5b\x32\x4d\xd8\xe6\xc3\xb7\xe1\x43\x2b\x27\xa9\x5d\x79\xf8\x81\xe7\xce\x7e\xa2\x07\xb6\xa8\xaa\xa7\xb2\x9a\x97\xd5\x82\x25\x93\x3e\xe9\xe3\xfd\x06\xad\x93\xa8\x5f\xb6\x9b\x75\x8a\x14\xf3\xef\xe0\xb1\x5c\x77\xfb\x3d\xb5\xa7\x94\x06\xbf\xa2\x22\x2f\xcb\x57\x77\xa6\x1c\x0f\x8a\xdb\x1d\xf8\x60\xfa\xac\x60\xe0\x63\x93\x25\xbb\xbc\x88\xda\xf5\x68\x4e\x4d\x54\xd3\x99\x19\x1d\x68\xe6\x34\xa6\x25\x8f\x5b\x11\x7b\xe7\x00\xa4\x1d\xdd\x49\xbd\x66\xde\x26\x4e\xb1\xcc\xbd\x05\xa9\x55\xfe\xcc\x49\xc3\x04\xa4\x27\xd3\x28\x7d\xcd\xf9\xd7\xbb\x25\x4d\x9e\xce\xee\xc7\x71\xc2\xdf\x5b\x74\x72\xd6\xfd\x01\xd4\x3c\xff\xbf\x4b\xa3\xcb\xd7\x6f\x00\x00\x00\xff\xff\xce\x1f\x49\x33\xb0\x02\x00\x00"

func srcViewsArticle_viewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_srcViewsArticle_viewHtml,
		"src/views/article_view.html",
	)
}

func srcViewsArticle_viewHtml() (*asset, error) {
	bytes, err := srcViewsArticle_viewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/views/article_view.html", size: 688, mode: os.FileMode(420), modTime: time.Unix(1520018149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x31\x6b\xf3\x30\x10\x80\xe1\x39\xf9\x15\xc7\xcd\x49\x14\x0f\xdf\x90\x0f\x59\xd0\xd2\xb5\x50\x4a\xa1\xf3\x45\xb9\x5a\x2a\xb2\x4e\x48\xe7\x80\x31\xfe\xef\xc5\x1d\x4a\xa1\xeb\xc3\x0b\xef\xb2\x40\xcc\x81\x6b\xd4\x06\x98\x68\x96\x49\x11\xd6\x75\xbf\xdb\xed\x6c\xe8\xdc\x3b\x27\x2f\x23\x5b\x13\x3a\xf7\x6d\x05\xee\xe2\xe9\xda\x63\x50\x2d\xff\x8d\x69\x3e\xf0\x48\x27\xa9\x83\x41\xd0\xb9\xb0\x7c\xf4\xf8\xc2\xb5\x49\x46\xf7\x3c\x43\xa6\x91\x21\x36\xb0\xad\x50\x86\x52\xa5\x70\xd5\xb9\xc7\xcd\xd1\xbd\xca\x48\x31\xc3\x23\x4d\xc3\xc4\xd6\x6c\x8d\x3b\x80\x1d\x59\xe9\x57\x7b\x8d\x55\xc3\x13\x29\x23\x78\xc9\xca\x59\x7b\xec\x2e\x97\xf3\xb1\xeb\x8e\xe7\x7f\xe8\x96\x05\x4e\x0f\x03\xc3\xba\xc2\xcc\x54\x1b\x48\xba\x1d\xfe\x1c\x3f\xe5\xfa\x16\x35\x31\xba\x1b\xdf\x39\x6d\xfc\x73\x2c\xd4\x5a\x94\x4c\xca\x07\x48\xe4\x25\x47\x7f\xb2\xa6\xb8\xfd\x57\x00\x00\x00\xff\xff\xed\x8f\xcc\x09\x1f\x01\x00\x00"

func srcViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_srcViewsIndexHtml,
		"src/views/index.html",
	)
}

func srcViewsIndexHtml() (*asset, error) {
	bytes, err := srcViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/views/index.html", size: 287, mode: os.FileMode(420), modTime: time.Unix(1520018149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcViewsLayoutHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdf\x6f\xdb\x36\x10\x7e\x4e\xfe\x0a\x4e\x2f\xb2\x07\x59\x5c\xd6\xb5\x1b\x62\x4a\x5d\x9b\x66\x3f\x80\xae\x1d\xba\x14\xd8\x10\xe4\xe1\x4c\x9d\x29\x26\x14\xa9\x90\x27\x6b\x86\xe3\xff\x7d\xa0\x64\xc7\x29\x6a\xe4\x69\x2f\x16\x79\xbc\xef\xc3\xc7\xef\x78\x67\xf1\xcd\xbb\x8f\x17\x57\xff\xfc\x79\xc9\x6a\x6a\x4c\x79\x2a\xe2\x87\x19\xb0\xaa\x48\xd0\x26\xe5\xe9\x89\xa8\x11\xaa\xf2\xf4\xe4\x44\x34\x48\xc0\x64\x0d\x3e\x20\x15\x49\x47\xcb\xd9\x4f\xc9\x70\xb0\x80\x80\xac\xf6\xb8\x2c\x12\xce\x37\x1b\x96\x7f\xc2\xfb\x0e\x03\xe5\xbf\xb9\x40\x6c\xbb\x4d\x0e\xf0\x9a\xa8\x9d\xe1\x7d\xa7\x57\x45\xf2\xf7\xec\xf3\x9b\xd9\x85\x6b\x5a\x20\xbd\x30\x98\x30\xe9\x2c\xa1\xa5\x22\xf9\xfd\xb2\xc0\x4a\xe1\x13\x9c\x85\x06\x8b\x64\xa5\xb1\x6f\x9d\xa7\x27\xa9\xbd\xae\xa8\x2e\x2a\x5c\x69\x89\xb3\x61\x93\x31\x6d\x35\x69\x30\xb3\x20\xc1\x60\x71\x36\xd2\x90\x26\x83\xe5\xa5\xe9\xb5\x05\xcf\x66\x2c\xea\xbc\x8a\x31\xb6\xdd\x0a\x3e\x9e\xc6\x3c\xa3\xed\x1d\xf3\x68\x8a\x24\xd0\xda\x60\xa8\x11\x29\xd9\xdd\x0e\xda\x36\x97\x21\x24\x8c\xd6\x2d\x16\x09\xe1\xbf\xc4\xe3\x7e\x00\x06\xe9\x75\x4b\x0c\xc2\xda\x4a\x16\xbc\x1c\xd3\x6f\x43\x52\x0a\x3e\x9e\x45\x37\xf9\xce\x4e\xb1\x70\xd5\x7a\xc0\xc5\x00\xfa\xb8\x3c\x11\xf5\x59\x29\x60\x6f\x65\xb2\x57\x2b\x38\x94\x82\xd7\x67\x63\x8e\x85\xd5\xb0\x38\x11\x9d\x19\x17\x51\xf4\x13\x1c\x0f\x04\xf2\xce\xad\xd0\x2f\x8d\xeb\x73\xe9\x1a\xde\x05\xf4\x81\xbf\xf8\xe1\xc7\xef\x5f\xbd\x7c\xc5\x71\xa4\x4d\xca\x37\xe1\x6e\xe4\x36\xfa\x38\x93\xd2\x54\x77\x8b\x81\xe2\x11\x74\xe1\x2a\x7c\x0e\xd5\x80\x36\xe4\xce\xbd\x6b\x40\xdb\x7c\x01\x9d\xea\xf0\xe7\x1d\x3a\x32\x45\x06\x4b\x20\xe9\x39\x12\x8f\x50\x25\xe5\x27\x84\xea\xb9\xac\xa5\xf3\xd4\x59\x4c\xca\x5f\xc6\xc5\x97\xb9\x82\xef\x0c\x12\x7c\xef\x99\x68\x99\x34\x10\x42\x91\x44\xd7\x8d\x8e\xd8\x3f\xb4\xd5\x0d\x18\x1d\x88\x2d\xd6\xac\xc2\xa0\x95\x15\xbc\x1d\x6a\xc3\x0f\xc5\x11\x01\x25\x69\x67\x07\x9e\xcd\x86\xad\x35\x9a\x8a\x6d\xb7\x43\xda\x93\x33\xb1\x74\x8e\xf6\xf5\xdc\x0b\x8d\xcf\x3e\x9c\x73\xbe\x02\xa3\x2b\x20\xe7\xf3\xfe\x45\xee\xbc\xe2\xb6\xe3\xaf\x2b\x27\x8b\x98\x70\x7e\xb4\x79\x9e\x86\x3e\x7f\x7a\x9f\xff\x45\x5e\x5b\x35\x74\x95\x08\x2d\xd8\xfd\x85\xb4\x74\x76\x16\xbb\xf7\xe5\xf0\xe0\x5a\xb0\x65\xb4\xe3\x2b\x19\xe7\x9c\xdf\x6a\x15\xa0\xdf\x4b\x90\x21\xcc\x1e\x75\x1d\x14\xbe\xee\xbc\xfe\xbf\x64\xc9\x10\x5e\x7c\xa9\x6a\xb3\x61\x7a\xc9\xf2\xf7\x4e\x29\xdc\xb9\x78\x90\xc9\x8d\x53\xae\xa3\x63\x4c\xc6\xc9\xbb\xaf\x98\xd0\x04\x3c\xc6\xa1\xed\x31\x8a\xce\x1e\x27\xb1\x8f\xd5\x3c\x54\x50\xec\x1b\x77\xb2\xec\xec\x50\xe2\x89\xce\x42\xe6\x32\x95\xf9\x0c\xb2\x66\xba\xd1\xd7\xe9\xaf\xce\x29\x83\x6f\x2c\x98\x35\x69\x19\x3e\x2e\x6e\x51\x52\x7a\x53\xf8\xb9\xbe\xf6\x37\x45\xfc\x79\x78\x78\xc4\x4f\x37\x93\x18\xc9\xef\x8b\xf1\xf3\xf0\x70\x7d\x33\xcd\xdb\x2e\xd4\x13\xf0\xaa\x6b\xd0\x52\x98\x6e\xb3\xe1\xd0\x14\x67\xdf\x5a\xec\xd9\x3b\x20\x9c\x4c\xe7\x50\x84\x5c\x7a\x04\xc2\x4b\x83\x31\x71\xe2\xa6\x59\x53\x84\x5c\x21\xed\x22\xe1\xed\xfa\x0a\xd4\x07\x68\x70\xe2\xa6\xd7\xdf\xdd\xcc\x21\x1f\x06\x52\x71\x36\x87\x3c\x0e\x25\x35\x6f\xf2\x16\x3c\x5a\xfa\xe0\x2a\xcc\xb5\x0d\xe8\xe9\x2d\x2e\x9d\xc7\x49\xbc\xd0\x76\x3a\xe9\xb5\xad\x5c\x9f\x55\x4e\x0e\x6a\xb2\x74\x34\x21\xcd\x52\xce\xfb\xbe\xcf\xd5\x70\xdf\x19\xec\x2f\x3c\x8c\x87\xc3\xee\x36\xa4\x59\xaa\x20\x9d\xce\x4f\x15\x4c\xd2\x51\x70\x9a\xb1\x34\x3e\x99\x0b\x67\x97\x5a\x75\x1e\xa2\x17\xf9\xa3\x67\x57\xee\x0e\x2d\x63\xdb\x6d\xcc\x83\x8e\xdc\x1e\x1d\xd0\x56\x31\xd6\x82\xc2\x38\xfd\x63\x7c\x68\xb8\xc3\x40\x1d\x07\xa9\xe0\xe3\x1f\xd8\x7f\x01\x00\x00\xff\xff\x08\x83\x10\xe0\xd1\x06\x00\x00"

func srcViewsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_srcViewsLayoutHtml,
		"src/views/layout.html",
	)
}

func srcViewsLayoutHtml() (*asset, error) {
	bytes, err := srcViewsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/views/layout.html", size: 1745, mode: os.FileMode(420), modTime: time.Unix(1520348202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcViewsLoginHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x51\x0a\xc2\x30\x0c\xc6\xf1\xe7\xee\x14\x21\x17\x18\x7b\x6f\x77\x02\xc1\x81\x5e\xa0\xba\x68\x0b\x6d\x53\xda\x54\x19\x63\x77\x17\x27\x3e\x08\x3e\xe6\x47\xf8\xf8\xaf\x2b\xf8\xe4\xa8\x78\xa9\x80\xc1\x2e\xdc\x04\x61\xdb\x3a\xa5\x94\x76\xc3\x78\xe0\xbb\x4f\xba\x77\xc3\xb8\xcb\x8d\x4b\x84\x48\xe2\x78\x36\x38\x1d\x4f\x67\xdc\x5d\x69\x9f\x72\x13\x90\x25\x93\xc1\x6c\x6b\x7d\x72\x99\x11\x92\x8d\x3f\x77\x0e\xf6\x4a\x8e\xc3\x4c\xc5\xe0\xf4\xe5\x3f\x13\xb5\x5d\xa2\x17\x84\x87\x0d\x8d\x0c\xee\x15\x9f\x3f\xdd\xbf\x1b\xc6\xee\x15\x00\x00\xff\xff\x3b\x06\x1c\x24\xb8\x00\x00\x00"

func srcViewsLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_srcViewsLoginHtml,
		"src/views/login.html",
	)
}

func srcViewsLoginHtml() (*asset, error) {
	bytes, err := srcViewsLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/views/login.html", size: 184, mode: os.FileMode(420), modTime: time.Unix(1520018149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcViewsQuote_listHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x4b\x0a\x02\x31\x0c\x86\xd7\xf5\x14\x61\x5c\x3b\x65\xf6\xa1\x20\xb8\x71\x29\x78\x81\x41\x83\x0d\x94\x16\x3a\x29\x28\x21\x77\x97\xd6\xc7\x2a\xc9\x47\xfe\x87\x2a\x70\x8e\x54\x59\x36\x98\xd2\xfa\x2a\x4d\x26\x30\xdb\x39\xe7\x30\x2e\xe1\xd2\x8a\xd0\x86\x3e\x2e\x61\xa0\x96\xc6\x74\xaa\x50\xd7\xfc\x20\x98\x3f\x1f\x5f\x89\xc3\xc4\x61\xaf\x0a\xf3\xf9\x04\x66\x70\x80\xbe\x1f\x9b\xc4\x52\xfb\x8d\x37\x16\x0a\x9d\x5d\xe9\x29\x60\x86\x7e\x10\xf4\x89\xff\xc6\x94\xef\xbf\x06\xbe\xe7\xbd\x03\x00\x00\xff\xff\x50\xc7\x36\x01\xa3\x00\x00\x00"

func srcViewsQuote_listHtmlBytes() ([]byte, error) {
	return bindataRead(
		_srcViewsQuote_listHtml,
		"src/views/quote_list.html",
	)
}

func srcViewsQuote_listHtml() (*asset, error) {
	bytes, err := srcViewsQuote_listHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/views/quote_list.html", size: 163, mode: os.FileMode(420), modTime: time.Unix(1520018149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcViewsQuote_viewHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\xc1\xea\xc2\x30\x0c\x87\xcf\xdd\x53\x84\xfe\xef\x2b\xbb\xf7\x5f\x10\xbc\x78\x14\x7c\x81\xa9\x19\x19\x8e\x05\xbb\x14\x95\xd0\x77\x97\x14\x11\x6f\xf9\x7d\x7c\xf9\x54\x61\x5e\x09\xf3\x2c\x1b\xf8\x65\x7c\x71\x11\x0f\xb5\x76\xaa\xf0\x98\x85\xa0\x3f\x16\x16\x34\x12\x69\x48\x71\x04\xca\x38\xfd\xfb\x70\x37\xbc\x05\x55\xe8\x0f\x7b\xa8\xd5\xa7\xbf\xef\x1d\xc3\x98\x62\xa0\x21\x75\xce\xb9\x78\x5e\xf8\x72\x6b\x7a\xdb\xce\xb4\x13\x3e\xc5\x9a\xb6\xe3\xc4\x2c\x98\x93\xf1\x5d\x11\xe2\xdc\x12\x1f\xda\x12\xe1\xb7\xa1\x0a\xb8\x5e\xed\xfb\x1d\x00\x00\xff\xff\x40\x29\xb8\x1f\xbc\x00\x00\x00"

func srcViewsQuote_viewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_srcViewsQuote_viewHtml,
		"src/views/quote_view.html",
	)
}

func srcViewsQuote_viewHtml() (*asset, error) {
	bytes, err := srcViewsQuote_viewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/views/quote_view.html", size: 188, mode: os.FileMode(420), modTime: time.Unix(1520018149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _srcViewsUncssHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x3d\x93\xdc\x20\x0c\xad\xf7\x7e\x05\xb7\xbd\xc7\x73\x3d\xe7\x22\x5f\x5d\x26\x29\xd2\xa4\xca\x80\x51\xd6\xca\xf2\x15\x24\x72\xe7\x7f\x9f\x61\xc1\x78\x6f\xf7\x0a\x1b\xe9\x81\x9e\xf4\x04\x92\x8f\x9f\xbe\x7d\xfc\xf1\xf3\xfb\x67\xb1\xb0\xb3\xd3\x83\xac\xcb\x41\xea\x60\xd6\xe9\xe1\x70\x90\x04\x33\x63\xf0\xc5\x3e\xc8\xc7\x61\x10\x1f\x14\xe1\x2c\x58\x9d\x48\x64\x02\x23\xf4\x2a\x78\x01\x41\xc8\x20\x86\xa1\x9e\x5b\x9e\x26\xa9\x26\x39\x96\x6f\x79\xaa\x58\x14\xb3\x55\x44\xcf\x47\x0b\xca\x1c\x27\x39\xc6\x86\x77\xb3\xa7\xf8\xaa\xd2\xd9\x84\x17\x2f\xd0\x9b\x3c\x83\x11\xc4\xab\x05\xea\xf4\xb1\xb3\xcf\xc1\xc0\x24\xc7\xb6\x34\x46\x6d\xc3\x7c\xfe\x9b\x03\xc3\xd4\xd8\xe5\x78\x85\x5d\xce\x64\x7b\x59\x0f\xd2\xe2\x2d\x8b\xc5\x7d\xeb\x62\x5c\xd7\x58\x9c\x04\x77\x89\x13\xb4\x98\x2d\x5a\x8e\x2d\x43\x17\xf5\x25\x24\x47\x02\x19\x5c\x6b\xdc\xa6\xe6\x77\x48\xae\x45\xa3\x8f\x99\x05\xaf\x11\x9e\x8f\x0c\xaf\x7c\x7c\x07\x8f\x8a\xe8\x25\x24\xf3\xde\x1e\x65\xed\xb0\x47\x15\x06\x95\xa0\xb4\xaa\x9b\xb5\xb6\x9e\xf2\xe1\xad\xa0\x8b\x4b\x51\xf9\xed\xae\x16\xfb\x87\x44\xf9\x0d\x73\x70\x0e\x3c\x57\xe7\xd2\xc8\x6a\x9e\x61\x2d\xd5\x54\x87\xc0\xc2\xcc\x21\x0d\xac\x4e\x0d\xc9\x9a\x5a\x90\xcf\x4e\x43\xaa\xb6\x45\x86\xa4\x6c\x75\xfe\xa9\x84\x4a\xdb\x46\xc8\xe0\xa2\x55\x0c\xb7\xf0\xc6\xa8\x98\x1b\x09\x71\x42\xdf\x50\x13\xe6\x7e\x82\x91\xb7\xa8\xf6\x7a\x6f\xaa\x43\x73\x57\x5c\xe9\x5f\x13\x5a\x94\xdf\x11\x75\x72\xaf\x1c\xec\x85\xa0\xce\x5b\x23\x12\x9c\xe0\x35\x6e\xf2\xfc\xb9\xa5\x58\x9d\x0e\x4d\xa7\xce\xd6\x02\x6f\x36\x5a\xfe\x85\xfe\xca\x43\x7f\x45\xee\x80\x55\x53\x06\x16\x76\x0d\xca\x18\xdc\x3d\x70\x71\x51\x84\xd4\xfb\x11\xfc\xa9\x8c\x56\xb9\xc2\x76\xd5\x6f\x5f\xa8\x1c\xf7\x79\x96\x63\x1d\x72\x39\xd6\xa1\xff\x1f\x00\x00\xff\xff\xd1\x80\xa1\xb6\x0c\x04\x00\x00"

func srcViewsUncssHtmlBytes() ([]byte, error) {
	return bindataRead(
		_srcViewsUncssHtml,
		"src/views/uncss.html",
	)
}

func srcViewsUncssHtml() (*asset, error) {
	bytes, err := srcViewsUncssHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/views/uncss.html", size: 1036, mode: os.FileMode(420), modTime: time.Unix(1520348202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/views/article_edit.html": srcViewsArticle_editHtml,
	"src/views/article_form.html": srcViewsArticle_formHtml,
	"src/views/article_list.html": srcViewsArticle_listHtml,
	"src/views/article_view.html": srcViewsArticle_viewHtml,
	"src/views/index.html": srcViewsIndexHtml,
	"src/views/layout.html": srcViewsLayoutHtml,
	"src/views/login.html": srcViewsLoginHtml,
	"src/views/quote_list.html": srcViewsQuote_listHtml,
	"src/views/quote_view.html": srcViewsQuote_viewHtml,
	"src/views/uncss.html": srcViewsUncssHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"article_edit.html": &bintree{srcViewsArticle_editHtml, map[string]*bintree{}},
			"article_form.html": &bintree{srcViewsArticle_formHtml, map[string]*bintree{}},
			"article_list.html": &bintree{srcViewsArticle_listHtml, map[string]*bintree{}},
			"article_view.html": &bintree{srcViewsArticle_viewHtml, map[string]*bintree{}},
			"index.html": &bintree{srcViewsIndexHtml, map[string]*bintree{}},
			"layout.html": &bintree{srcViewsLayoutHtml, map[string]*bintree{}},
			"login.html": &bintree{srcViewsLoginHtml, map[string]*bintree{}},
			"quote_list.html": &bintree{srcViewsQuote_listHtml, map[string]*bintree{}},
			"quote_view.html": &bintree{srcViewsQuote_viewHtml, map[string]*bintree{}},
			"uncss.html": &bintree{srcViewsUncssHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

